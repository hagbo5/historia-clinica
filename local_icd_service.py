import json
import time
import os # Needed for checking file existence in main block

# Global variables for caching
_icd_data_cache = None
_cache_load_time = None
CACHE_DURATION_SECONDS = 3600  # 1 hour

def load_icd_data(file_path="structured_icd_data.json"):
    """
    Loads ICD data from the specified JSON file, utilizing a time-based cache.
    If the cache is valid, returns cached data. Otherwise, loads from file,
    updates cache, and returns the data.
    """
    global _icd_data_cache, _cache_load_time

    # Check cache validity
    if _icd_data_cache is not None and _cache_load_time is not None:
        if (time.time() - _cache_load_time) < CACHE_DURATION_SECONDS:
            print("Loading ICD data from cache.")
            return _icd_data_cache

    # Cache is invalid or not present, load from file
    print(f"Loading ICD data from file: {file_path}")
    try:
        with open(file_path, 'r') as f:
            data = json.load(f)
        _icd_data_cache = data
        _cache_load_time = time.time()
        return data
    except FileNotFoundError:
        print(f"Error: ICD data file not found at {file_path}.")
        _icd_data_cache = None # Invalidate cache on error
        _cache_load_time = None
        return None
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from {file_path}.")
        _icd_data_cache = None # Invalidate cache on error
        _cache_load_time = None
        return None
    except Exception as e:
        print(f"An unexpected error occurred while loading ICD data: {e}")
        _icd_data_cache = None # Invalidate cache on error
        _cache_load_time = None
        return None

def get_chapters():
    """
    Retrieves a list of all chapters (ID and title only).
    """
    data = load_icd_data()
    if not data:
        return []

    chapters_summary = []
    for chapter in data:
        chapters_summary.append({
            "chapter_id": chapter.get("chapter_id"),
            "chapter_title": chapter.get("chapter_title")
        })
    return chapters_summary

def get_chapter_details(chapter_id):
    """
    Retrieves full details for a specific chapter by its ID.
    """
    data = load_icd_data()
    if not data:
        return None

    for chapter in data:
        if chapter.get("chapter_id") == chapter_id:
            return chapter
    return None

def get_disease_details(disease_code):
    """
    Retrieves full details for a specific disease by its code.
    """
    data = load_icd_data()
    if not data:
        return None

    for chapter in data:
        if "diseases" in chapter:
            for disease in chapter["diseases"]:
                if disease.get("code") == disease_code:
                    return disease
    return None

def search_diseases(query_term):
    """
    Searches for diseases where the query_term matches (case-insensitive)
    in the disease name or description.
    """
    data = load_icd_data()
    if not data:
        return []

    results = []
    query_lower = query_term.lower()

    for chapter in data:
        if "diseases" in chapter:
            for disease in chapter["diseases"]:
                name_match = False
                desc_match = False
                if disease.get("name") and query_lower in disease.get("name", "").lower():
                    name_match = True
                if disease.get("description") and query_lower in disease.get("description", "").lower():
                    desc_match = True

                if name_match or desc_match:
                    results.append(disease)
    return results

if __name__ == "__main__":
    # This script relies on `structured_icd_data.json` which is generated by `process_local_icd.py`.
    # For testing, ensure that file exists.
    data_file = "structured_icd_data.json"

    if not os.path.exists(data_file):
        print(f"Error: The data file '{data_file}' was not found.")
        print("Please run `process_local_icd.py` first to generate it.")
    else:
        print("--- Testing local_icd_service.py ---")

        # 1. Get all chapters
        print("\n1. Testing get_chapters():")
        chapters = get_chapters()
        if chapters:
            print(f"Found {len(chapters)} chapters. First few:")
            for ch in chapters[:3]:
                print(ch)
        else:
            print("No chapters found.")

        # 2. Get specific chapter details
        print("\n2. Testing get_chapter_details('01'):")
        chapter_01 = get_chapter_details("01")
        if chapter_01:
            # Print summary, not the full disease list for brevity in test output
            print(f"Chapter ID: {chapter_01.get('chapter_id')}, Title: {chapter_01.get('chapter_title')}")
            print(f"Number of diseases in this chapter: {len(chapter_01.get('diseases', []))}")
        else:
            print("Chapter '01' not found.")

        # Test with a non-existent chapter
        print("\n   Testing get_chapter_details('99') (non-existent):")
        chapter_99 = get_chapter_details("99")
        if chapter_99 is None:
            print("Correctly returned None for non-existent chapter '99'.")
        else:
            print(f"Error: Expected None, but got {chapter_99} for chapter '99'.")


        # 3. Get specific disease details
        print("\n3. Testing get_disease_details('1A00'):") # Cholera
        disease_1a00 = get_disease_details("1A00")
        if disease_1a00:
            print(f"Disease Code: {disease_1a00.get('code')}, Name: {disease_1a00.get('name')}")
            print(f"Description: {disease_1a00.get('description', '')[:100]}...") # Print start of description
            print(f"Inclusions: {disease_1a00.get('inclusions')}")
        else:
            print("Disease '1A00' not found.")

        # Test with a non-existent disease
        print("\n   Testing get_disease_details('XXXX') (non-existent):")
        disease_xxxx = get_disease_details("XXXX")
        if disease_xxxx is None:
            print("Correctly returned None for non-existent disease 'XXXX'.")
        else:
            print(f"Error: Expected None, but got {disease_xxxx} for disease 'XXXX'.")

        # 4. Search for diseases
        print("\n4. Testing search_diseases('Cholera'):")
        cholera_search_results = search_diseases("Cholera")
        if cholera_search_results:
            print(f"Found {len(cholera_search_results)} diseases matching 'Cholera':")
            for dis in cholera_search_results:
                print(f"  - {dis.get('code')} {dis.get('name')}")
        else:
            print("No diseases found matching 'Cholera'.")

        print("\n   Testing search_diseases('vibrio'):")
        vibrio_search_results = search_diseases("vibrio")
        if vibrio_search_results:
            print(f"Found {len(vibrio_search_results)} diseases matching 'vibrio':")
            for dis in vibrio_search_results:
                 print(f"  - {dis.get('code')} {dis.get('name')}")
        else:
            print("No diseases found matching 'vibrio'.")

        print("\n   Testing search_diseases('nonexistentterm'):")
        nonexistent_search = search_diseases("nonexistentterm")
        if not nonexistent_search:
            print("Correctly returned empty list for 'nonexistentterm'.")
        else:
            print(f"Error: Expected empty list, got {nonexistent_search} for 'nonexistentterm'.")


        # 5. Test caching
        print("\n5. Testing cache functionality:")
        print("First call (should load from file):")
        get_chapters() # This call uses load_icd_data
        print("\nSecond call (should load from cache):")
        get_chapters()

        print("\n--- End of tests ---")
